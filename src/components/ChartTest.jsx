import React, { useContext, useEffect, useRef, useState } from "react";
import { init } from "klinecharts";
import { adjustFromTo } from "../utils/utils";
import "./style.scss";
import { data } from "../data";
import { createRectX } from "./extenstion/rect";
import { useSelector } from "react-redux";
import { ChartContext } from "../utils/ChartContext";
import generatedDataList from "../utils/generateData";

const ChartTest = (props) => {
  const ref = useRef(null);
  const [loading, setLoading] = useState(false);
  let { chartSettings } = useContext(ChartContext);

  const documentResize = () => {
    chartSettings?.resize();
  };

  //   const createRect = () => {
  //     // const clr = directionBet === "long" ? "rgba(77, 180, 150,0.5)" : "rgba(246, 42, 87,0.5)";
  //     chartSettings?.createOverlay({
  //       groupId: "drawing_tools",
  //       name: "rect",
  //       visible: true,
  //       lock: false,
  //       mode: "normal",
  //       styles: {
  //         polygon: {
  //           color: "rgba(77, 180, 150,0.5)",
  //         },
  //       },
  //     });
  //   };

  useEffect(() => {
    window.addEventListener("resize", documentResize);
    return () => {
      window.removeEventListener("resize", documentResize);
    };
  }, []);

  useEffect(() => {
    if (!loading) {
      setLoading(true);
      const get = async () => {
        chartSettings?.applyNewData(generatedDataList());
        setLoading(false);
      };
      get();
    }
  }, [chartSettings]);

  const createRect = () => {
    chartSettings?.createOverlay({
      // name
      name: "sampleCircle",
      // Three steps are required to complete the drawing of a circle
      totalStep: 3,
      // Create the graphic information corresponding to the point
      createPointFigures: ({ coordinates }) => {
        if (coordinates.length === 2) {
          const xDis = Math.abs(coordinates[0].x - coordinates[1].x);
          const yDis = Math.abs(coordinates[0].y - coordinates[1].y);
          // Determine the coordinates of the circle generated by the corresponding point
          const radius = Math.sqrt(xDis * xDis + yDis * yDis);
          // The chart has built-in basic graphics 'circle', which can be used directly
          return {
            key: "sampleCircle",
            type: "circle",
            attrs: {
              ...coordinates[0],
              r: radius,
            },
            styles: {
              // Select the border and fill it, other selections use the default style
              style: "stroke_fill",
            },
          };
        }
        return [];
      },
    });
  };

  return <div className="chart__wrapper" id="demo-chart" ref={ref}></div>;
};

export default ChartTest;
